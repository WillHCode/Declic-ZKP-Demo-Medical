import * as circomlibjs from "circomlibjs";
import * as snarkjs from "snarkjs";
import {Web3} from "web3";

const bytecode = "6080604052348015600e575f80fd5b506104b88061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80636668a9fa1461002d575b5f80fd5b610047600480360381019061004291906103fe565b61005d565b6040516100549190610469565b60405180910390f35b5f610395565b5f608085015f86017f0fc131146cfa12fd465f0412f04e143048dca4f8fba9c8c83cb2668c163ea79a81527f2254165eaa1c734a8af641a40b6ecdca0d619400661ec7dc838926789d10aea56020820152833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f2e639bbe8d15cbb61db5c2f63afc6700696f8897f54615e9b22984a9a503586960c08301527f259b4bcf1c180b555e83cec19e026d258c0e608c1fcf67312659cdf8e23263ce60e08301527f0d0f887ce51e8885d10662194c6f306ba20f491f189e16fb0a5164429afc31726101008301527f249a4b6200b3dffc331e3b0a21379afd1f4a3610fa453f2f0987a764af694ecf6101208301527f0b22ecef0c5596298d2d92815b41dd2155fb63d47f3e9d673709ca7ef3ef4dfd6101408301527f1037d9ebb1db5a820716661aee54ae55f91997ee09769d3dc9ba61abe8b2bb686101608301525f87015161018083015260205f018701516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f0d2a5a5fc38744d19ff75579e4e0d564d1217697d942805c14378c3699c0716a6102808301527f28c4a6cf18050b1691b4d8219537dea0d7b18bf0f3a5f5deb06293e4b8b55fcb6102a08301527f10fcaab4b4f992d21ed00ba9b27f55ae9a42f9a932fcb3b832e8b64dd72647876102c08301527f03777b219699daef4b6017eb44754a69c1fa866ff63c959dc492e3074db269a96102e08301526020826103008460086107d05a03fa825181169350505050949350505050565b60405161038081016040526103ac81848688610063565b805f5260205ff35b5f80fd5b5f80fd5b5f819050826020600202820111156103d7576103d66103b8565b5b92915050565b5f819050826040600202820111156103f8576103f76103b8565b5b92915050565b5f805f6101008486031215610416576104156103b4565b5b5f610423868287016103bc565b9350506040610434868287016103dd565b92505060c0610445868287016103bc565b9150509250925092565b5f8115159050919050565b6104638161044f565b82525050565b5f60208201905061047c5f83018461045a565b9291505056fea26469706673582212200084b3dc6c4f8a43f39371b7d8c40c80a8f1d4626dff869033fba2b9edd87fbb64736f6c634300081a0033"
const ABI = [
    {
        "inputs": [
            {
                "internalType": "uint256[2]",
                "name": "_pA",
                "type": "uint256[2]"
            },
            {
                "internalType": "uint256[2][2]",
                "name": "_pB",
                "type": "uint256[2][2]"
            },
            {
                "internalType": "uint256[2]",
                "name": "_pC",
                "type": "uint256[2]"
            }
        ],
        "name": "verifyProof",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
]

const verificationKey = {
    "protocol": "groth16",
    "curve": "bn128",
    "nPublic": 1,
    "vk_alpha_1": [
        "20491192805390485299153009773594534940189261866228447918068658471970481763042",
        "9383485363053290200918347156157836566562967994039712273449902621266178545958",
        "1"
    ],
    "vk_beta_2": [
        [
            "6375614351688725206403948262868962793625744043794305715222011528459656738731",
            "4252822878758300859123897981450591353533073413197771768651442665752259397132"
        ],
        [
            "10505242626370262277552901082094356697409835680220590971873171140371331206856",
            "21847035105528745403288232691147584728191162732299865338377159692350059136679"
        ],
        [
            "1",
            "0"
        ]
    ],
    "vk_gamma_2": [
        [
            "10857046999023057135944570762232829481370756359578518086990519993285655852781",
            "11559732032986387107991004021392285783925812861821192530917403151452391805634"
        ],
        [
            "8495653923123431417604973247489272438418190587263600148770280649306958101930",
            "4082367875863433681332203403145435568316851327593401208105741076214120093531"
        ],
        [
            "1",
            "0"
        ]
    ],
    "vk_delta_2": [
        [
            "10857046999023057135944570762232829481370756359578518086990519993285655852781",
            "11559732032986387107991004021392285783925812861821192530917403151452391805634"
        ],
        [
            "8495653923123431417604973247489272438418190587263600148770280649306958101930",
            "4082367875863433681332203403145435568316851327593401208105741076214120093531"
        ],
        [
            "1",
            "0"
        ]
    ],
    "vk_alphabeta_12": [
        [
            [
                "2029413683389138792403550203267699914886160938906632433982220835551125967885",
                "21072700047562757817161031222997517981543347628379360635925549008442030252106"
            ],
            [
                "5940354580057074848093997050200682056184807770593307860589430076672439820312",
                "12156638873931618554171829126792193045421052652279363021382169897324752428276"
            ],
            [
                "7898200236362823042373859371574133993780991612861777490112507062703164551277",
                "7074218545237549455313236346927434013100842096812539264420499035217050630853"
            ]
        ],
        [
            [
                "7077479683546002997211712695946002074877511277312570035766170199895071832130",
                "10093483419865920389913245021038182291233451549023025229112148274109565435465"
            ],
            [
                "4595479056700221319381530156280926371456704509942304414423590385166031118820",
                "19831328484489333784475432780421641293929726139240675179672856274388269393268"
            ],
            [
                "11934129596455521040620786944827826205713621633706285934057045369193958244500",
                "8037395052364110730298837004334506829870972346962140206007064471173334027475"
            ]
        ]
    ],
    "IC": [
        [
            "9923317941074357645525470126546820348062862208149470373119000818760608723508",
            "9507208186842976331925558541609995853345953544588085152355008058479026768810",
            "1"
        ],
        [
            "19569739558948517813183889135968180736939646673215283327694789125228909551176",
            "558487798851910190427086331184277187268588313099405389043714641824318032792",
            "1"
        ]
    ]
}


function convertToFixedLengthArray(inputString, length = 16) {
    const array = Array.from(inputString).map(char => char.charCodeAt(0));
    if (array.length > length) {
        return array.slice(0, length);
    } else {
        return array.concat(Array(length - array.length).fill(0));
    }
}

export async function generate_proof(inputString) {
    // Generate the hash required for the proof
    const poseidon = await circomlibjs.buildPoseidon();
    const inputArray = convertToFixedLengthArray(inputString);
    console.log("Input array: ", inputArray);
    const hash = poseidon.F.toString(poseidon(inputArray));

    // Generate the proof
    const { proof, publicSignals } = await snarkjs.groth16.fullProve(
        { in: inputArray, hash: hash },
        "poseidon_hasher.wasm",
        "circuit_0000.zkey");

    //const generateCall = await snarkjs.generateCall(publicSignals, proof);
    //console.log("generateCall: ", generateCall);


    // Verify the proof
     const vKey = JSON.parse(JSON.stringify(verificationKey));
     const result = await snarkjs.groth16.verify(vKey, publicSignals, proof);
    if (result === true) {
        console.log("Verification OK");
        alert("Proof verified. You will be redirected to the next page. Click OK to continue.");
        await new Promise(r => setTimeout(r, 2000));
        location.href = "https://huggingface.co/spaces/WillHbx/ThyroidCancer"
    } else {
        console.log("Invalid proof");
    }
}
